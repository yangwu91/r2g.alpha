#!/usr/bin/env python
import sys
import os
from copy import deepcopy

from r2g import main
from r2g.online import blast
from r2g.online import fetch
from r2g.local import assemblers
from r2g import errors
from r2g import warnings

version = "1.0.0"


if __name__ == "__main__":
    args = main.parse_arguments(sys.argv[1:], version)
    main.log(args, args['verbose'], 'debug')
    app_json = main.preflight(args)
    main.log(app_json, args['verbose'], 'debug')
    try:
        main.log("Trying to create the output folder: {}".format(args['outdir']))
        os.mkdir(args['outdir'], 0o750)
    except OSError:
        main.log("{} exists.".format(args['outdir']))
        if not os.access(args['outdir'], os.W_OK):
            raise errors.OutputError('{} is not writable.'.format(args['outdir']))

    seq_name, download_list = blast.query(args)
    # Abort if there is no hit:
    if len(download_list) == 0:
        main.log("NCBI hasn't return any valid hits blasting against {}. Don't panic, maybe you can try "
                 "another SRA database instead.".format(args['sra']))
    else:
        # fd_outdir refers to the output folder for fastq-dump:
        fd_stamp = main.stamp()
        fd_outdir = os.path.join(args['outdir'], "fastq-dump_output_{}".format( fd_stamp))
        main.log("Creating a folder for fastq-dump: {}".format(fd_outdir))
        os.mkdir(fd_outdir, 0o750)
        # start downloading:
        fd_log_file = os.path.join(args['outdir'], 'run_fastq-dump_{}.log'.format(fd_stamp))
        fd_log = open(fd_log_file, 'w')
        fastq_list = {}
        paired = True  # the initial value
        for item in download_list.items():
            sra_sequences = {}
            current_job, total_job = 0, len(item[-1])
            for spot in item[-1]:
                current_job += 1
                retry = -1
                main.processing(current_job, total_job, "Start downloading hit sequences from {}".format(item[0]))
                while retry < int(args['retry']):
                    try:
                        spot_sequences, log = fetch.fastq_dump(item[0], spot[0], spot[1], app_json)
                    except errors.FetchError as err:
                        main.log("Errors occurred while fetching sequences. Retrying...")
                        retry += 1
                        if retry == int(args['retry']):
                            main.log(warnings.w2(item[0], spot[0], spot[1], retry, err))
                    else:
                        for p in spot_sequences.keys():
                            sra_sequences[p] = deepcopy(sra_sequences.get(p, '')) + deepcopy(spot_sequences[p])
                        fd_log.write(log)
                        break
            for p in sra_sequences.keys():
                filename = os.path.join(fd_outdir, "{}_{}.fastq".format(item[0], p))
                filenames = deepcopy(fastq_list.get(p, []))
                filenames.append(filename)
                fastq_list[p] = deepcopy(filenames)
                with open(filename, "w") as outf:
                    outf.write(sra_sequences[p])
            if len(sra_sequences.keys()) < 2:
                paired = False
            if paired is False and len(sra_sequences.keys()) > 1:
                main.log(warnings.w1())
        fd_log.close()
        # Trinity:
        main.log("Calling Trinity.")
        trinity = assemblers.Trinity(args, app_json, fastq_list, paired)
        trinity_dir = trinity.run()
        cleanup_items = [fd_log_file, fd_outdir]
        if args['stage'] == 'chrysalis' or args['stage'] == 'butterfly':
            final_result = os.path.join(args['outdir'], "{}.homologs.{}.fasta".format(seq_name, main.stamp()))
            cleanup_items.append(trinity_dir)
            main.log("The final assembled homologous gene was written to {}".format(final_result))
        else:
            final_result = os.path.join(args['outdir'], "r2g_results-{}.{}".format(args['stage'], main.stamp()))
            main.log('r2g stopped at the stage "{}" as you requested.'.format(args['stage']))
            main.log("The final results are in the folder {}".format(final_result))
        trinity.copyto(final_result)

        # Clean up:
        if args['cleanup']:
            main.log("A little bit of housekeeping work...")
            main.remove_files_dirs(cleanup_items)

    main.log("All set. Bye.")
